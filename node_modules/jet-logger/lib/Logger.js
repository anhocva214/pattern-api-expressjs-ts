"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var colors_1 = __importDefault(require("colors"));
var fs_1 = __importDefault(require("fs"));
var util_1 = __importDefault(require("util"));
var Levels = {
    info: {
        color: 'green',
        prefix: 'INFO',
    },
    imp: {
        color: 'magenta',
        prefix: 'IMPORTANT',
    },
    warn: {
        color: 'yellow',
        prefix: 'WARNING',
    },
    err: {
        color: 'red',
        prefix: 'ERROR',
    }
};
var Logger = (function () {
    function Logger(mode, filePath, timestamp, format, customLogger) {
        this._mode = mode || Logger.initMode();
        this._filePath = filePath || Logger.initFilePath();
        this._timestamp = (timestamp !== undefined ? timestamp : Logger.initTimestamp());
        this._format = format || Logger.initFormat();
        this._customLogger = customLogger || Logger.customLogger;
    }
    Logger.initMode = function () {
        if (!!process.env.JET_LOGGER_MODE) {
            return process.env.JET_LOGGER_MODE.toLocaleUpperCase();
        }
        else {
            return "CONSOLE";
        }
    };
    Logger.initFilePath = function () {
        if (!!process.env.JET_LOGGER_FILEPATH) {
            return process.env.JET_LOGGER_FILEPATH;
        }
        else {
            return Logger.DEFAULT_LOG_FILE_NAME;
        }
    };
    Logger.initTimestamp = function () {
        if (!!process.env.JET_LOGGER_TIMESTAMP) {
            return (process.env.JET_LOGGER_TIMESTAMP.toLocaleUpperCase() === 'TRUE');
        }
        else {
            return true;
        }
    };
    Logger.initFormat = function () {
        if (!!process.env.JET_LOGGER_FORMAT) {
            return process.env.JET_LOGGER_FORMAT.toLocaleUpperCase();
        }
        else {
            return "LINE";
        }
    };
    Object.defineProperty(Logger, "mode", {
        get: function () {
            return Logger._mode;
        },
        set: function (mode) {
            Logger._mode = mode;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Logger.prototype, "mode", {
        get: function () {
            return this._mode;
        },
        set: function (mode) {
            this._mode = mode;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Logger, "filePath", {
        get: function () {
            return Logger._filePath;
        },
        set: function (filePath) {
            Logger._filePath = filePath;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Logger.prototype, "filePath", {
        get: function () {
            return this._filePath;
        },
        set: function (filePath) {
            this._filePath = filePath;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Logger, "timestamp", {
        get: function () {
            return Logger._timestamp;
        },
        set: function (timestamp) {
            Logger._timestamp = timestamp;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Logger.prototype, "timestamp", {
        get: function () {
            return this._timestamp;
        },
        set: function (timestamp) {
            this._timestamp = timestamp;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Logger, "format", {
        get: function () {
            return Logger._format;
        },
        set: function (format) {
            Logger._format = format;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Logger.prototype, "format", {
        get: function () {
            return this._format;
        },
        set: function (format) {
            this._format = format;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Logger, "customLogger", {
        get: function () {
            return Logger._customLogger;
        },
        set: function (customLogger) {
            Logger._customLogger = customLogger;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Logger.prototype, "customLogger", {
        get: function () {
            return this._customLogger;
        },
        set: function (customLogger) {
            this._customLogger = customLogger;
        },
        enumerable: false,
        configurable: true
    });
    Logger.Info = function (content, printFull) {
        Logger.PrintLogHelper(content, printFull || false, Levels.info);
    };
    Logger.Imp = function (content, printFull) {
        Logger.PrintLogHelper(content, printFull || false, Levels.imp);
    };
    Logger.Warn = function (content, printFull) {
        Logger.PrintLogHelper(content, printFull || false, Levels.warn);
    };
    Logger.Err = function (content, printFull) {
        Logger.PrintLogHelper(content, printFull || false, Levels.err);
    };
    Logger.PrintLogHelper = function (content, printFull, level) {
        Logger.PrintLog(content, printFull, level, Logger.mode, Logger.timestamp, Logger.format, Logger.filePath, Logger.customLogger);
    };
    Logger.prototype.info = function (content, printFull) {
        this.printLogHelper(content, printFull || false, Levels.info);
    };
    Logger.prototype.imp = function (content, printFull) {
        this.printLogHelper(content, printFull || false, Levels.imp);
    };
    Logger.prototype.warn = function (content, printFull) {
        this.printLogHelper(content, printFull || false, Levels.warn);
    };
    Logger.prototype.err = function (content, printFull) {
        this.printLogHelper(content, printFull || false, Levels.err);
    };
    Logger.prototype.printLogHelper = function (content, printFull, level) {
        Logger.PrintLog(content, printFull, level, this.mode, this.timestamp, this.format, this.filePath, this.customLogger);
    };
    Logger.PrintLog = function (content, printFull, level, mode, timestamp, format, filePath, customLogger) {
        if (mode === "OFF") {
            return;
        }
        var jsonContent = {};
        if (printFull) {
            content = util_1.default.inspect(content);
        }
        if (format === "JSON") {
            jsonContent.message = content;
        }
        if (mode !== "CUSTOM") {
            if (format === "LINE") {
                content = level.prefix + ': ' + content;
            }
            else if (format === "JSON") {
                jsonContent.level = level.prefix;
            }
        }
        if (timestamp) {
            if (format === "LINE") {
                var time = '[' + new Date().toISOString() + '] ';
                content = time + content;
            }
            else if (format === "JSON") {
                jsonContent.timestamp = new Date().toISOString();
            }
        }
        if (format === "JSON") {
            content = JSON.stringify(jsonContent);
        }
        if (mode === "CONSOLE") {
            var colorFn = colors_1.default[level.color];
            console.log(colorFn(content));
        }
        else if (mode === "FILE") {
            Logger.WriteToFile(content + '\n', filePath).catch(function (err) {
                console.log(err);
            });
        }
        else if (mode === "CUSTOM") {
            if (!!customLogger) {
                customLogger.sendLog(new Date(), level.prefix, content);
            }
            else {
                throw Error(Logger.CUSTOM_LOGGER_ERR);
            }
        }
        else {
            throw Error('The correct logger mode was not specified: Must be "CUSTOM", "FILE", ' +
                '"OFF", or "CONSOLE".');
        }
    };
    Logger.WriteToFile = function (content, filePath) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, new Promise(function (res, rej) {
                        return fs_1.default.appendFile(filePath, content, function (err) {
                            return (!!err ? rej(err) : res());
                        });
                    })];
            });
        });
    };
    Logger.DEFAULT_LOG_FILE_NAME = 'jet-logger.log';
    Logger.CUSTOM_LOGGER_ERR = 'Custom logger mode set to true, but no ' +
        'custom logger was provided.';
    Logger._mode = Logger.initMode();
    Logger._filePath = Logger.initFilePath();
    Logger._timestamp = Logger.initTimestamp();
    Logger._format = Logger.initFormat();
    Logger._customLogger = null;
    return Logger;
}());
exports.default = Logger;
